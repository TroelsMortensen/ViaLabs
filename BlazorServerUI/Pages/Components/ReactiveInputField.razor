<div class="floating-label-group">
    @if (UseArea)
    {
        <textarea style="width: @WidthWithUnit; height: 90px" class="floating-input" type="text" required @onchange="@OnChange">@InitialValue</textarea>
    }
    else
    {
        <input style="width: @WidthWithUnit"
               class="floating-input"
               type="text"
               required
               @onchange="@OnChange"
               value="@InitialValue"
               @onfocus="() => backup = InitialValue"/>
    }
    <label class="floating-label">@GhostText</label>
</div>

@code{

    [Parameter]
    public bool UseArea { get; set; } = false;

    [Parameter]
    public string InitialValue { get; set; } = "";

    [Parameter]
    public string WidthWithUnit { get; set; } = "25ch";

    [Parameter]
    public string GhostText { get; set; } = "";

    [Parameter]
    public Func<string, Task<bool>>? OnValueChangeWithReset { get; set; }

    [Parameter]
    public EventCallback<string> OnValueChange { get; set; }

    private string backup = "";

    private async Task OnChange(ChangeEventArgs args)
    {
        string tmp = backup;

        string s = args.Value!.ToString()!;
        await OnValueChange.InvokeAsync(s);

        if (OnValueChangeWithReset != null)
        {
            bool wasSuccess = await OnValueChangeWithReset?.Invoke(s)!;
            if (!wasSuccess)
            {
                InitialValue = "";
                await Task.Yield();
                StateHasChanged();

                InitialValue = tmp;
            }
        }
    }
}