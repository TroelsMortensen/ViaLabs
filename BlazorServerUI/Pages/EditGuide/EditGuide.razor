@page "/EditGuide/{GuideId:guid}"
@using BlazorServerUI.MarkdownConvert
@using Dispatcher
@using ViewData.ProfileInfo.DTOs
@using ViewData.ProfileInfo.Queries
@using Application.UseCases.GuideUseCases.GuideChangeTitle
@using Domain.OperationResult
@using Application.UseCases.GuideUseCases.GuideChangeCategory
@inject IQueryDispatcher QueryDispatcher
@inject ICommandDispatcher CommandDispatcher

<div class="outermost-box">
    <div class="top-row-box">
        <div class="top-row-left">
            <button class="vialab-button positive-color">Save</button>
            <label>Last saved: 09:51:23</label>
        </div>
        <div class="top-row-right">
            <button class="vialab-button neutral-color">Publish guide to make it visible</button>
        </div>
    </div>
    <div class="content-box">
        <div class="left-side-box">
            <div class="guide-details-box">
                <div style="margin: 5px">
                    <ReactiveInputField WidthWithUnit="30ch" InitialValue="@guideData.Title" OnValueChangeWithReset="ChangeGuideTitle" />
                    <div style="margin-top: 15px"></div>
                    <DropDown WidthWithUnit="30ch" InitialValue="@guideData.CategoryId.ToString()" OnValueChange="ChangeGuideCategory" Values="@guideData.CategoriesByTeacher.ToDictionary(vm => vm.Id.ToString(), vm => vm.Title)"/>
                    <div style="margin-top: 15px"></div>
                    <ReactiveInputField WidthWithUnit="200px" GhostText="Optional short description" UseArea="true" InitialValue="@guideData.Description" OnValueChangeWithReset="ChangeGuideDescription"/>
                </div>
                <div style="margin: 5px">
                    <input id="show-steps" type="checkbox" style="cursor: pointer"/>
                    <label for="show-steps" style="cursor: pointer">Show step numbers</label>
                </div>
            </div>
            <div class="steps-box">
                @for (int i = 0; i < 4; i++)
                {
                    <div style="display:flex; border: solid 1px; margin: 3px;">
                        <label style="margin-left: 5px">@(i).</label>
                        <label style="margin-left: 5px">intro</label>
                        <div style="margin-left:auto;padding: 1px">
                            <img src="icons/UpArrow.svg" style="height: 0.6em;cursor: pointer;display: block;margin-bottom: 3px;" title="Move up"/>
                            <img src="icons/DownArrow.svg" style="height: 0.6em;cursor: pointer;display: block" title="Move down"/>
                        </div>
                    </div>
                    <div>
                        +
                    </div>
                }
            </div>
        </div>
        <div class="right-side-box">
            <div class="markdown-editor-box"></div>
            <div class="result-display-box"></div>
        </div>
    </div>
</div>
@* <div style="min-width: 45%;"> *@
@*     <div style="margin:10px"> *@
@*         <button>Preview</button> *@
@*         <button>Save</button> *@
@*         <input type="checkbox"/> *@
@*         <label>Autosave</label> *@
@*     </div> *@
@*     <div style="min-width: 45%;"> *@
@*         <MarkdownEditor @bind-Value="@markdownValue" *@
@*                         ValueHTMLChanged="@MdToHtml" *@
@*                         CustomButtonClicked="OnCustomButtonClicked" *@
@*                         ImageUploadEndpoint="" *@
@*                         ImageUploadChanged="@OnImageUploadChanged" *@
@*                         ImageUploadStarted="@OnImageUploadStarted" *@
@*                         ImageUploadProgressed="@OnImageUploadProgressed" *@
@*                         ImageUploadEnded="@OnImageUploadEnded" *@
@*                         UploadImage="true"> *@
@*             $1$ <Toolbar> #1# *@
@*             $1$     <MarkdownToolbarButton Name="Test" Icon="fa fa-bolt" Action="MarkdownAction.Bold"/> #1# *@
@*             $1$     <MarkdownToolbarButton Separator Name="CustomImageUpload" Icon="fa fa-star" Title="My Image upload" /> #1# *@
@*             $1$ </Toolbar> #1# *@
@*         </MarkdownEditor> *@
@*     </div> *@
@* </div> *@
@* <div style="min-width: 45%; min-height: 600px; background-color: #e0fbff"> *@
@*     @slideContent *@
@* </div> *@

@code
{
    [Parameter]
    public Guid GuideId { get; set; }

    private string markdownValue = String.Empty;

    private MarkupString slideContent;
    private readonly MarkdigAdapter converter = new();

    private GuideDataVM guideData = null!;
    private GuideDataVM previousGuideData = null!;
    private string title = "";


    protected override async Task OnInitializedAsync()
    {
        guideData = await QueryDispatcher.QueryAsync(new GuideDataForEditQuery(GuideId));
        previousGuideData = guideData;
        title = guideData.Title;
    }

    private Task MdToHtml(string mdSource)
    {
        slideContent = (MarkupString)converter.ConvertMdToHtml(mdSource);
        return Task.CompletedTask;
    }

    Task OnImageUploadChanged(FileChangedEventArgs e)
    {
        this.StateHasChanged();
        return Task.CompletedTask;
    }

    Task OnImageUploadStarted(FileStartedEventArgs e)
    {
        Console.WriteLine($"Started Image: {e.File.Name}");
        return Task.CompletedTask;
    }

    Task OnImageUploadProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"Image: {e.File.Name} Progress: {(int)e.Percentage}");
        return Task.CompletedTask;
    }

    Task OnImageUploadEnded(FileEndedEventArgs e)
    {
        Console.WriteLine($"Finished Image: {e.File.Name}, Success: {e.Success}");
        return Task.CompletedTask;
    }

    private Task OnCustomButtonClicked(MarkdownButtonEventArgs args)
    {
        throw new NotImplementedException();
    }

    private async Task<bool> ChangeGuideTitle(string arg)
    {
        Result result = await CommandDispatcher.DispatchAsync(new ChangeGuideTitleCommand(guideData.GuideId, arg));
        if (result.HasErrors)
        {
    // TODO Display errors here.
            Console.WriteLine("Error");
            return false;
        }
        guideData.Title = arg;
        previousGuideData = guideData;
        return true;
    }

    private async Task ChangeGuideCategory(string arg)
    {
        ChangeGuideCategoryCommand command = new(guideData.GuideId, Guid.Parse(arg));
        Result result = await CommandDispatcher.DispatchAsync(command);
    }


    private async Task<bool> ChangeGuideDescription(string arg)
    {

        return false;
    }
}