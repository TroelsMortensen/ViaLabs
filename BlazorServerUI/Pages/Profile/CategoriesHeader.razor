@using BlazorServerUI.StateContainers.Profile
@using System.Drawing
@using Application.Features.CreateCategory
@using Application.Features.OldStuffToBeMovedAround.LogicContracts
@using Application.Features.ProfileDataLogic.DTOs.CategoryDTOs
@using Application.Features.ProfileDataLogic.LogicContracts
@inject ICreateCategoryHandler createCategoryHandler
@inject ProfileStateContainer profileStateContainer

<div style="display:flex; justify-content: center">
    <div>
        <h1>
            Categories
        </h1>
    </div>
    <div>
        <img class="new-category-icon" src="icons/AddCategory.svg" @onclick="OpenDialog" title="New Category"/>
    </div>
</div>
<hr/>

<Modal ShowModal="@showModal">
    <h3>New Category</h3>
    <hr/>

    <div style="margin-bottom: 5px">
        <ReactiveInputField WidthWithUnit="20ch" GhostText="Title" OnValueChange="s => categoryTitle = s"></ReactiveInputField>
    </div>
    <div style="margin-bottom: 5px">
        <label>Background color:</label>
    </div>
    <div style="margin-bottom: 5px">
        <ColorPicker OnColorChange="@(args => backgroundColor = args)" ColorValue="@backgroundColor"/>
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div>
            <label style="color:red">@errorLabel</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="NewCategory">Accept</button>
        <button class="negative-color vialab-button" style="margin-left: 10px" @onclick="@(() => showModal = false)">Cancel</button>
    </div>
</Modal>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private string backgroundColor = "#ffffff";
    private bool showModal;
    private string errorLabel = String.Empty;
    private string categoryTitle = String.Empty;

    private async Task NewCategory()
    {
        AuthenticationState authState = await AuthenticationState;
        string teacherName = authState.User.Identity!.Name!;

        errorLabel = string.Empty;
        CategoryCreationRequest category = new(categoryTitle, teacherName, backgroundColor);

        try
        {
            Result<CategoryDto> result = await createCategoryHandler.CreateAsync(category);

            profileStateContainer.AddCategory(result.Value);
            
            showModal = false;
            categoryTitle = string.Empty;
        }
        catch (Exception e)
        {
            errorLabel = "Error: " + e.Message;
        }
    }

    private void OpenDialog()
    {
        var random = new Random();
        
        Color c = Color.FromArgb(random.Next(150, 255), random.Next(150, 255), random.Next(150, 255));
        backgroundColor = ColorTranslator.ToHtml(c);;
        showModal = true;
    }
}