@using BlazorServerUI.StateContainers.Profile
@using BlazorServerUI.Popups
@using System.Drawing
@using Application.HandlerContracts
@using Application.UseCases.CategoryUseCases.CategoryCreate
@using Dispatcher
@using Domain.OperationResult
@using JsonData.QueryImpls.ProfileViewQueries
@using ViewData
@using ViewData.ProfileInfo.DTOs
@using ViewData.ProfileInfo.Queries
@using SingleCategoryInfoQuery = ViewData.ProfileInfo.Queries.SingleCategoryInfoQuery
@inject ICommandDispatcher CommandDispatcher
@inject ProfileStateContainer ProfileStateContainer
@inject IQueryDispatcher CategoryQueryHandler

<hr/>
<div style="display:flex; justify-content: center">
    <div>
        <h1>
            Categories
        </h1>
    </div>
    <div>
        <img class="new-category-icon" src="icons/AddCategory.svg" @onclick="OpenDialog" title="New Category"/>
    </div>
</div>
<hr/>

<Modal ShowModal="@showModal">
    <h3>New Category</h3>
    <hr/>

    <div style="margin-bottom: 5px">
        <ReactiveInputField WidthWithUnit="20ch" GhostText="Title" OnValueChange="s => categoryTitle = s"></ReactiveInputField>
    </div>
    <div style="margin-bottom: 5px">
        <label>Background color:</label>
    </div>
    <div style="margin-bottom: 5px">
        <ColorPicker OnColorChange="@(args => backgroundColor = args)" ColorValue="@backgroundColor"/>
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div>
            <label style="color:red">@errorLabel</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="NewCategory">Accept</button>
        <button class="cancel-color vialab-button" style="margin-left: 10px" @onclick="@(() => showModal = false)">Cancel</button>
    </div>
</Modal>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private string backgroundColor = "#ffffff";
    private bool showModal;
    private string errorLabel = String.Empty;
    private string categoryTitle = String.Empty;

    private async Task NewCategory()
    {
        AuthenticationState authState = await AuthenticationState;
        string teacherName = authState.User.Identity!.Name!;

        CreateCategoryCommand createCategory = new(categoryTitle, teacherName, backgroundColor, Guid.NewGuid());


        Result result = await CommandDispatcher.Dispatch(createCategory);

        if (result.HasErrors)
        {
            errorLabel = result.GetCombinedErrorMessage();
            return;
        }
        CategoryDto resultDto = await CategoryQueryHandler.Query(new SingleCategoryInfoQuery(createCategory.Id));
        throw new Exception("Create query handlers here");
        // profileStateContainer.AddCategory(result.Value);


        showModal = false;
        categoryTitle = string.Empty;
        SnackBarHandler.ShowSuccess("Category successfully created");
    }

    private void OpenDialog()
    {
        errorLabel = String.Empty;
        var random = new Random();

        Color c = Color.FromArgb(random.Next(150, 255), random.Next(150, 255), random.Next(150, 255));
        backgroundColor = ColorTranslator.ToHtml(c);
        ;
        showModal = true;
    }
}