@using BlazorServerUI.Pages.Profile.RadialMenuItems

@inject ICategoryService categoryService
@inject IGuideService guideService
@inject NavigationManager navMgr


<div class="category-card" style="background-color: @(Category == null ? "#fff" : Category.BackgroundColor)">
    <div class="navbarheader">
        <div class="header-left">
        </div>
        <div class="header-title">
            <h2 style="font-weight: bold">@(Category == null ? "Un-Categorized" : Category.Title)</h2>
        </div>
        <div class="header-right">
            <div style="position: relative; display: inline-block; ">
                <div class="container">
                    <div class="radial-menu">
                        <div class="@(showMenu ? "radial-background-open" : "radial-background-closed")" @onmouseover="SetIsInteractingWithMenu"></div>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "menu-open" : "menu-closed")" src="icons/Options.svg" @onclick="ToggleMenu" title="Options"/>
                        <NewGuideMenuItem ShowMenu="@showMenu" Category="Category" OnGuideCreated="OnGuideCreated"/>
                        <NewVideoLinkMenuItem ShowMenu="@showMenu"/>
                        @if (Category != null)
                        {
                            <EditCategoryMenuItem ShowMenu="showMenu" Category="Category" OnChange="@((cat) => Category = cat)"/>
                            <DeleteCategoryMenuItem ShowMenu="showMenu" Category="Category" OnDeleted="OnStateChanged"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <h5 style="font-style: italic">Documentation</h5>
    <div style="text-align: left">
        @if (!guides.Any())
        {
            <div style="margin-left: 15px;">
                No guides yet..
            </div>
        }
        else
        {
            foreach (Guide guide in guides)
            {
                <div class="guide-title">
                    <img class="new-item-icon "
                         src="icons/EditGuide.svg"
                         @onclick='() => navMgr.NavigateTo("/EditGuide/" + guide.Id)'
                         title="Edit Guide"/>
                    <a href="/Guide/@guide.Id" title="View Guide">@guide.Title</a>
                </div>
            }
        }
    </div>
    <h5 style="font-style: italic">Videos</h5>
    <div style="text-align: left; padding: 15px">
        <strong>
            <a href="https://youtu.be/EX81bDA-mkA">Installing postgres and setting up DataGrip</a>
        </strong>
        <p style="text-align: left; padding: 5px">This video shows you how to install a postgres database, and afterwards use DataGrip to connect to it.</p>
    </div>
</div>

@code {
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    [Parameter]
    public Category? Category { get; set; }

    private ICollection<Guide> guides = new List<Guide>();

    private bool showMenu = false;
    private bool isInteracting = false;
    private bool delayedCloseIsActive = false;

    protected override async Task OnInitializedAsync()
    {
        if (Category != null)
        {
            guides = await guideService.GetGuidesByCategoryIdAsync(Category.Id);
        }
        else
        {
            AuthenticationState authState = await AuthState;
            string teacher = authState.User.Identity!.Name!;
            guides = await guideService.GetUnCategorizedByTeacherAsync(teacher);
        }
    }

    private async Task ToggleMenu()
    {
        showMenu = !showMenu;
        isInteracting = true;
        if (showMenu && !delayedCloseIsActive)
            await DelayedMenuClose();
    }

    private void SetIsInteractingWithMenu()
    {
        if (showMenu)
            isInteracting = true;
    }

    private async Task DelayedMenuClose()
    {
        delayedCloseIsActive = true;
        isInteracting = true;

        while (isInteracting && showMenu)
        {
            isInteracting = false;
            await Task.Delay(2500);
        }

        delayedCloseIsActive = false;
        showMenu = false;
    }

    private void OnGuideCreated(Guide guide)
    {
        guides.Add(guide);
    }

}