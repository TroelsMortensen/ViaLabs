@using BlazorServerUI.Pages.Profile.RadialMenuItems
@using Application.Features.ProfileDataLogic.DTOs.CategoryDTOs
@using Application.Features.ProfileDataLogic.DTOs.ExternalResourceDTOs
@using Application.Features.ProfileDataLogic.DTOs.GuideDTOs
@using Application.Features.ProfileDataLogic.LogicContracts
@using Application.Features.ProfileDataLogic.ProviderContracts
@using BlazorServerUI.Handlers
@using BlazorServerUI.StateContainers.Profile
@using Domain.Exceptions
@using Application.Features.ProfileDataLogic.DTOs

@inject IGuideProvider guideProvider
@inject NavigationManager navMgr
@inject ProfileStateContainer profileStateContainer
@inject IExternalResourceLogic extResLogic;

@implements IDisposable

<div class="category-card" style="background-color: @(Category == null ? "#fff" : Category.BackgroundColor)">
    <div class="navbarheader">
        <div class="header-left">
        </div>
        <div class="header-title">
            <h2 style="font-weight: bold">@(Category == null ? "Un-Categorized" : Category.Title)</h2>
        </div>
        <div class="header-right">
            <div style="position: relative; display: inline-block; ">
                <div class="container">
                    <div class="radial-menu">
                        <div class="@(showMenu ? "radial-background-open" : "radial-background-closed")" @onmouseover="SetIsInteractingWithMenu"></div>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "menu-open" : "menu-closed")" src="icons/Options.svg" @onclick="ToggleMenu" title="Options"/>
                        <NewGuideMenuItem ShowMenu="@showMenu" Category="Category"/>
                        <NewExResourceMenuItem ShowMenu="@showMenu" Category="Category"/>
                        @if (Category != null)
                        {
                            <EditCategoryMenuItem ShowMenu="showMenu" CategoryId="Category.Id"/>
                            <DeleteCategoryMenuItem ShowMenu="showMenu" CategoryId="Category.Id"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <h5 style="font-style: italic">Guides</h5>
    <div style="text-align: left">
        @if (guides == null || !guides.Any())
        {
            <p style="margin-left: 15px;">
                No guides yet..
            </p>
        }
        else
        {
            <ul style="list-style: none; margin-left: -20px">
                @foreach (GuideHeaderDto guide in guides)
                {
                    <li>
                        <div class="guide-title">
                            <img class="new-item-icon hidable"
                                 src="icons/edit.gif"
                                 @onclick='() => navMgr.NavigateTo("/EditGuide/" + guide.Id)'
                                 title="Edit Guide"/>
                            <a href="/Guide/@guide.Id" title="View Guide" class="movable-title">@guide.Title</a>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
    <h5 style="font-style: italic">External Resources</h5>
    <div style="text-align: left">

        @if (externalResources != null && externalResources.Any())
        {
            foreach (ExternalResourceDisplayDto resource in externalResources)
            {
                <div class="resource-block" style="text-align: left; padding-left: 15px">
                    <img class="new-item-icon hidable"
                         src="icons/edit.gif"
                         @onclick="() => OpenEditResource(resource)"
                         title="Edit Resource"/>
                    <strong>
                        <a href="@resource.Url" class="movable-title" target=”_blank>@resource.Title</a>
                    </strong>
                    <p style="text-align: left; padding: 5px">
                        @resource.Description
                    </p>
                </div>
            }
        }
        else
        {
            <p style="margin-left: 15px;">No resouces yet..</p>
        }
    </div>
</div>
<Modal ShowModal="@showEditResourceDialog">
    <h3 >Create External Resource</h3>
    <hr/>
    <div style="margin-bottom: 15px">
        <ReactiveInputField GhostText="Title" WidthWithUnit="50ch" OnValueChange="s => resourceBeingEdited.Title = s" InitialValue="@resourceBeingEdited.Title"/>
    </div>
    <div style="margin-bottom: 15px">
        <ReactiveInputField GhostText="Url" WidthWithUnit="50ch" OnValueChange="s => resourceBeingEdited.Url = s" InitialValue="@resourceBeingEdited.Url"/>
    </div>
    <div style="margin-bottom: 5px">
        <ReactiveInputField UseArea="true" GhostText="Description" WidthWithUnit="50ch" OnValueChange="s => resourceBeingEdited.Description = s" InitialValue="@resourceBeingEdited.Description"></ReactiveInputField>
    </div>
    @if (!string.IsNullOrEmpty(editResourceMsg))
    {
        <div>
            <label style="color:red">@editResourceMsg</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 20px" @onclick="UpdateResource">Accept Changes</button>
        <button class="neutral-color vialab-button" style="margin-right: 20px" @onclick="CloseEditResourceDialog">Cancel</button>
        <button class="progress-button vialab-button"
                @onmousedown="DeleteButtonDown"
                @onmouseup="() => isHolding = false"
                @onmouseout="() => isHolding = false">
            <div class="progress-button-filler" style="width:@progress%"></div>
            <span class="progress-button-text">Hold to Delete</span>
        </button>
    </div>
</Modal>

@code {

    // [Parameter]
    // public EventCallback OnStateChanged { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    [Parameter]
    public Guid? CategoryId { get; set; }

    private CategoryDto? Category { get; set; }

    private ICollection<GuideHeaderDto> guides = null!;
    private ICollection<ExternalResourceDisplayDto> externalResources = null!;
    private bool showMenu = false;
    private bool isInteracting = false;
    private bool delayedCloseIsActive = false;
    private bool showEditResourceDialog = false;
    private bool isHolding;
    private int progress;

    private CategoryWithGuidesAndResourcesDto categoryWithGuidesAndResourcesDto = null!;

    private ExternalResourceDisplayDto? resourceBeingEdited;
    private string editResourceMsg = "";

    protected override void OnInitialized()
    {
        categoryWithGuidesAndResourcesDto = profileStateContainer.CategoriesWithGuides.First(c =>
            (c.Category != null && c.Category.Id.Equals(CategoryId)) || (c.Category == null && CategoryId == null));
        Category = categoryWithGuidesAndResourcesDto.Category;
        guides = categoryWithGuidesAndResourcesDto.Guides;
        externalResources = categoryWithGuidesAndResourcesDto.ExternalResources;
        profileStateContainer.OnCategoryUpdated += ReactToCategoryUpdated;
        profileStateContainer.OnGuideAdded += ReactToCategoryUpdated;
        profileStateContainer.OnExtResourceAdded += ReactToCategoryUpdated;
        profileStateContainer.OnExtResourceUpdated += ReactToCategoryUpdated;
        if (Category == null)
        {
            profileStateContainer.OnCategoryDeleted += StateHasChanged;
        }
    }

    private async Task ToggleMenu()
    {
        showMenu = !showMenu;
        isInteracting = true;
        if (showMenu && !delayedCloseIsActive)
        {
            await DelayedMenuClose();
        }
    }

    private void ReactToCategoryUpdated(Guid? categoryId)
    {
        if (categoryId == null && Category == null)
        {
            StateHasChanged();
        }
        if (categoryId != null && categoryId.Equals(Category?.Id))
        {
            StateHasChanged();
        }
    }


    // below methods are used to automatically keep open or close the pop-out radial menu.
    private void SetIsInteractingWithMenu()
    {
        if (showMenu)
        {
            isInteracting = true;
        }
    }

    private async Task DelayedMenuClose()
    {
        delayedCloseIsActive = true;
        isInteracting = true;

        while (isInteracting && showMenu)
        {
            isInteracting = false;
            await Task.Delay(2500);
        }

        delayedCloseIsActive = false;
        showMenu = false;
    }

    // above methods are...

    public void Dispose()
    {
        profileStateContainer.OnGuideAdded -= ReactToCategoryUpdated;
        profileStateContainer.OnCategoryUpdated -= ReactToCategoryUpdated;
        profileStateContainer.OnExtResourceAdded -= ReactToCategoryUpdated;
        profileStateContainer.OnExtResourceUpdated -= ReactToCategoryUpdated;

        if (Category == null)
        {
            profileStateContainer.OnCategoryDeleted -= StateHasChanged;
        }
    }

    private void OpenEditResource(ExternalResourceDisplayDto resource)
    {
        progress = 0;

        resourceBeingEdited = resource;
        showEditResourceDialog = true;
        editResourceMsg = "";
    }

    private async Task UpdateResource()
    {
        try
        {
            ExtResUpdateRequest request = new ExtResUpdateRequest(resourceBeingEdited.Id, resourceBeingEdited.Title, resourceBeingEdited.Url, resourceBeingEdited.Description);
            await extResLogic.UpdateAsync(request!);
            throw new NotImplementedException();
            // profileStateContainer.UpdateResource(resourceBeingEdited!);
            CloseEditResourceDialog();
        }
        catch (DataValidationException e)
        {
            editResourceMsg = e.Message;
        }
    }

    private void CloseEditResourceDialog()
    {
        resourceBeingEdited = null;
        showEditResourceDialog = false;
        editResourceMsg = "";
    }

    private async Task DeleteButtonDown()
    {
        isHolding = true;
        await UpdateProgressBar();
    }

    private async Task UpdateProgressBar()
    {
        while (progress < 100 && isHolding)
        {
            await Task.Delay(10);
            progress++;
            StateHasChanged();
        }
        if (progress == 100)
        {
            try
            {
                progress = 0;
                await DeleteResource();
                CloseEditResourceDialog();
            }
            catch (Exception e)
            {
                editResourceMsg = e.Message;
            }
        }
        if (!isHolding)
        {
            progress = 0;
        }
    }

    private async Task DeleteResource()
    {
        await extResLogic.DeleteAsync(resourceBeingEdited!.Id);
        profileStateContainer.DeleteResource(resourceBeingEdited.Id);
        SnackBarHandler.ShowSnackMessage("Resource deleted!");
    }

}