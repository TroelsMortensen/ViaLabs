@using Application.Profile.DTOs
@using BlazorServerUI.Pages.Components
@using Application.EntryContracts
@using Entities
@inject ICategoryHome categoryHome
@inject IGuideHome guideHome

<div class="category-card" style="background-color: @(CardDto == null ? "#fff" : CardDto.BackgroundColor)">
    <div class="navbarheader">
        <div class="header-left">
        </div>
        <div class="header-title">
            <h2 style="font-weight: bold">@(CardDto == null ? "Un-Categorized" : CardDto.Title)</h2>
        </div>
        <div class="header-right">
            <div style="position: relative; display: inline-block; ">
                <div class="container">
                    <div class="radial-menu">
                        <div class="@(showMenu ? "radial-background-open" : "radial-background-closed")"></div>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "menu-open" : "menu-closed")" src="icons/Options.svg" @onclick="ToggleMenu" title="Options"/>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "item-open-2" : "item-closed")" src="icons/AddGuide.svg" @onclick="NewGuide" @onmouseover="SetIsInteractingWithMenu" title="New Guide"/>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "item-open-3" : "item-closed")" src="icons/AddVideo.svg" @onclick="NewVideo" @onmouseover="SetIsInteractingWithMenu" title="New Video Link"/>
                        @if (CardDto != null)
                        {
                            <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "item-open-1" : "item-closed")" src="icons/EditCategory.svg" @onclick="ShowEditCategory" @onmouseover="SetIsInteractingWithMenu" title="Edit Category"/>
                            <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "item-open-4" : "item-closed")" src="icons/DeleteCategory.svg" @onclick="@(ShowRemoveCategory)" @onmouseover="SetIsInteractingWithMenu" title="Remove Category"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <h5 style="font-style: italic">Documentation</h5>
    <div style="text-align: left">
        <div class="guide-title">Tut1</div>
        <div class="guide-title">Tut2</div>
        <div class="guide-title">Tut3</div>
    </div>
    <h5 style="font-style: italic">Videos</h5>
    <div style="text-align: left; padding: 15px">
        <strong>
            <a href="https://youtu.be/EX81bDA-mkA">Installing postgres and setting up DataGrip</a>
        </strong>
        <p style="text-align: left; padding: 5px">This video shows you how to install a postgres database, and afterwards use DataGrip to connect to it.</p>
    </div>
</div>

<Modal ShowModal="@showEditCategoryModal">
    <h3>Edit Category</h3>
    <hr/>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Category title</label>
    </div>
    <div style="margin-bottom: 5px">
        <input type="text" style="width: 20ch; border-radius: 10px; padding: 3px; text-align: center" @bind="@editedCategoryTitle" max="25"/>
    </div>
    <div style="margin-bottom: 5px">
        <label>Background color:</label>
    </div>
    <div style="margin-bottom: 5px">
        <ColorPicker ColorValue="@editedBackgroundColor" OnColorChange="@(args => editedBackgroundColor = args)"/>
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div>
            <label style="color:red">@errorLabel</label>
        </div>
    }
    <div style="margin-top: 5px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="UpdateCategory">Accept</button>
        <button class="negative-color vialab-button" style="margin-left: 10px" @onclick="@(() => showEditCategoryModal = false)">Cancel</button>
    </div>
</Modal>

<Modal ShowModal="@showDeleteConfirmationModal">
    <h3>Delete Category?</h3>
    <hr/>
    <div style="margin-top: 5px">
        <button class="negative-color vialab-button" style="margin-right: 10px" @onclick="DeleteCategory">Delete</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="@(() => showDeleteConfirmationModal = false)">Cancel</button>
    </div>
</Modal>

<Modal ShowModal="@showAddGuideModal">
    <h3>Create New Guide</h3>
    <hr/>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Guide Title</label>
    </div>
    <div style="margin-bottom: 5px">
        <input type="text" style="width: 20ch; border-radius: 10px; padding: 3px; text-align: center" @bind="@newGuideTitle" max="25"/>
    </div>
    @if (!string.IsNullOrEmpty(createGuideErrorLabel))
    {
        <div>
            <label style="color:red">@createGuideErrorLabel</label>
        </div>
    }
    <div style="margin-top: 5px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="CreateNewGuide">Accept</button>
        <button class="negative-color vialab-button" style="margin-left: 10px" @onclick="@(() => showAddGuideModal = false)">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public Category? CardDto { get; set; }

    // edit
    private string? editedCategoryTitle;
    private string? editedBackgroundColor;
    private string errorLabel = string.Empty;
    private bool showEditCategoryModal;


    // delete category
    private bool showDeleteConfirmationModal;

    // add guide
    private bool showAddGuideModal;
    private string createGuideErrorLabel = String.Empty;
    private string newGuideTitle = String.Empty;
    
    //
    private bool showMenu = false;
    private bool isInteracting = false;
    private bool delayedCloseIsActive = false;

    protected override void OnInitialized()
    {
        if (CardDto == null) return;
        editedCategoryTitle = CardDto.Title;
        editedBackgroundColor = CardDto.BackgroundColor;
    }

    private Task NewGuide()
    {
        showMenu = false;
        return Task.CompletedTask;
    }

    private Task NewVideo()
    {
        showMenu = false;
        return Task.CompletedTask;
    }

    private void ShowRemoveCategory()
    {
        showMenu = false;
        showDeleteConfirmationModal = true;
    }

    private void ShowEditCategory()
    {
        showMenu = false;
        showEditCategoryModal = true;
    }

    private async Task ToggleMenu()
    {
        showMenu = !showMenu;
        isInteracting = true;
        if (showMenu && !delayedCloseIsActive)
            await DelayedMenuClose();
    }

    private void SetIsInteractingWithMenu()
    {
        if (showMenu)
            isInteracting = true;
    }

    private async Task DelayedMenuClose()
    {
        delayedCloseIsActive = true;
        isInteracting = true;

        while (isInteracting && showMenu)
        {
            isInteracting = false;
            await Task.Delay(2500);
        }

        delayedCloseIsActive = false;
        showMenu = false;
    }

    private async Task UpdateCategory()
    {
        errorLabel = string.Empty;
        Category toUpdate = new()
        {
            Id = CardDto.Id,
            Title = editedCategoryTitle,
            BackgroundColor = editedBackgroundColor
        };
        try
        {
            await categoryHome.UpdateCategoryAsync(toUpdate);
            CardDto = toUpdate;
            showEditCategoryModal = false;
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private Task DeleteCategory()
    {
        return Task.CompletedTask;
    }

    private async Task CreateNewGuide()
    {
        Guide guide = new()
        {
            Title = newGuideTitle
        };
        
    }

}