@using BlazorServerUI.Pages.Profile.RadialMenuItems
@using Application.DTOs.CategoryDTOs
@using Application.DTOs.ExternalResourceDTOs
@using Application.DTOs.GuideDTOs
@using Application.ProviderContracts
@using Application.ServiceContracts
@using BlazorServerUI.Handlers
@using BlazorServerUI.StateContainers.Profile

@inject IGuideProvider guideProvider
@inject NavigationManager navMgr
@inject ProfileStateContainer profileStateContainer

@implements IDisposable

<div class="category-card" style="background-color: @(Category == null ? "#fff" : Category.BackgroundColor)">
    <div class="navbarheader">
        <div class="header-left">
        </div>
        <div class="header-title">
            <h2 style="font-weight: bold">@(Category == null ? "Un-Categorized" : Category.Title)</h2>
        </div>
        <div class="header-right">
            <div style="position: relative; display: inline-block; ">
                <div class="container">
                    <div class="radial-menu">
                        <div class="@(showMenu ? "radial-background-open" : "radial-background-closed")" @onmouseover="SetIsInteractingWithMenu"></div>
                        <img class="new-item-icon hover-enlarge radial-menu-item @(showMenu ? "menu-open" : "menu-closed")" src="icons/Options.svg" @onclick="ToggleMenu" title="Options"/>
                        <NewGuideMenuItem ShowMenu="@showMenu" Category="Category"/>
                        <NewExResourceMenuItem ShowMenu="@showMenu" Category="Category"/>
                        @if (Category != null)
                        {
                            <EditCategoryMenuItem ShowMenu="showMenu" CategoryId="Category.Id"/>
                            <DeleteCategoryMenuItem ShowMenu="showMenu" CategoryId="Category.Id"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <h5 style="font-style: italic">Guides</h5>
    <div style="text-align: left">
        @if (guides == null || !guides.Any())
        {
            <div style="margin-left: 15px;">
                No guides yet..
            </div>
        }
        else
        {
            <ul style="list-style: none; margin-left: -20px">
                @foreach (GuideHeaderDto guide in guides)
                {
                    <li>
                        <div class="guide-title">
                            <img class="new-item-icon hidable"
                                 src="icons/edit.gif"
                                 @onclick='() => navMgr.NavigateTo("/EditGuide/" + guide.Id)'
                                 title="Edit Guide"/>
                            <a href="/Guide/@guide.Id" title="View Guide" class="movable-title">@guide.Title</a>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
    <h5 style="font-style: italic">External Resources</h5>
    @if(externalResources != null && externalResources.Any()) {
        foreach (ExternalResourceDisplayDto resource in externalResources)
        {
            <div style="text-align: left; padding: 15px">
                <strong>
                    <a href="@resource.Url">@resource.Title</a>
                </strong>
                <p style="text-align: left; padding: 5px">
                    @resource.Description
                </p>
            </div>            
        }
    }
    else
    {
        <p>No resouces yet</p>
    }
</div>

@code {

    // [Parameter]
    // public EventCallback OnStateChanged { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    [Parameter]
    public Guid? CategoryId { get; set; }

    private CategoryDto? Category { get; set; }

    private ICollection<GuideHeaderDto> guides = null!;
    private ICollection<ExternalResourceDisplayDto> externalResources = null!;
    private bool showMenu = false;
    private bool isInteracting = false;
    private bool delayedCloseIsActive = false;

    private CategoryWithGuidesAndResourcesDto categoryWithGuidesAndResourcesDto = null!;
    
    protected override void OnInitialized()
    {
        categoryWithGuidesAndResourcesDto = profileStateContainer.CategoriesWithGuides.First(c =>
            (c.Category != null && c.Category.Id.Equals(CategoryId)) || (c.Category == null && CategoryId == null));
        Category = categoryWithGuidesAndResourcesDto.Category;
        guides = categoryWithGuidesAndResourcesDto.Guides;
        externalResources = categoryWithGuidesAndResourcesDto.ExternalResources;
        profileStateContainer.OnCategoryUpdated += ReactToCategoryUpdated;
        profileStateContainer.OnGuideAdded += ReactToCategoryUpdated; 
        profileStateContainer.OnExtResourceAdded += ReactToCategoryUpdated;
        
        if (Category == null)
        {
            profileStateContainer.OnCategoryDeleted += StateHasChanged;
        }
    }

    private async Task ToggleMenu()
    {
        showMenu = !showMenu;
        isInteracting = true;
        if (showMenu && !delayedCloseIsActive)
        {
            await DelayedMenuClose();
        }
    }

    private void ReactToCategoryUpdated(Guid? categoryId)
    {
        if (categoryId == null && Category == null)
        {
            StateHasChanged();
        }
        if (categoryId != null && categoryId.Equals(Category?.Id))
        {
            StateHasChanged();
        }
    }

    
    // below methods are used to automatically keep open or close the pop-out radial menu.
    private void SetIsInteractingWithMenu()
    {
        if (showMenu)
        {
            isInteracting = true;
        }
    }

    private async Task DelayedMenuClose()
    {
        delayedCloseIsActive = true;
        isInteracting = true;

        while (isInteracting && showMenu)
        {
            isInteracting = false;
            await Task.Delay(2500);
        }

        delayedCloseIsActive = false;
        showMenu = false;
    }

    public void Dispose()
    {
        profileStateContainer.OnGuideAdded -= ReactToCategoryUpdated;
        profileStateContainer.OnCategoryUpdated -= ReactToCategoryUpdated;
        profileStateContainer.OnExtResourceAdded -= ReactToCategoryUpdated;

        if (Category == null)
        {
            profileStateContainer.OnCategoryDeleted -= StateHasChanged;
        }
    }

}