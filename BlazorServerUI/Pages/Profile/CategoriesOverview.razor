@using Application.DTOs.CategoryDTOs
@using Application.ProviderContracts
@using BlazorServerUI.Handlers
@inject ICategoryProvider categoryProvider
@inject NavigationManager navMgr

<div class="guides-container">

    <CategoriesHeader OnCategoryCreated="@CategoryAdded"/>

    <div class="column-container">
        <div class="guide-coloumn">
            <CategoryCard/>
            @{
                int idx = 0;
                foreach (CategoryDto category in categories)
                {
                    if (idx % 2 == 1)
                    {
                        CategoryDto tmp = category;
                        <CategoryCard Category="@tmp" OnStateChanged="SomethingChanged"/>
                    }
                    idx++;
                }
            }

        </div>
        <div class="guide-coloumn">
            @{
                int idx2 = 0;
                foreach (CategoryDto category in categories)
                {
                    if (idx2 % 2 == 0)
                    {
                        CategoryDto tmp = category;
                        <CategoryCard Category="@tmp" OnStateChanged="SomethingChanged"/>
                    }
                    idx2++;
                }
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private ICollection<CategoryDto> categories = null!;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        string teacherName = authState.User.Identity!.Name!;
        categories = await categoryProvider.GetCategoryCardsDTOAsync(teacherName);
    }


    private Task CategoryAdded(CategoryDto category)
    {
        categories.Add(category);
        categories = categories.OrderByDescending(c => c.Title).ToList();
        SnackBarHandler.ShowSnackMessage("Category created");
        return Task.CompletedTask;
    }

    private void SomethingChanged()
    {
        // TODO this is currently used to refresh after a category is deleted.
        // feels hacky, but would have to update categories and guides around. Much work. 
        Console.WriteLine("Update...");
        navMgr.NavigateTo("/Profile", true);
    }

}