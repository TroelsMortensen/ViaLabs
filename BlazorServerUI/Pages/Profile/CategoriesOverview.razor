@using Application.DTOs.CategoryDTOs
@using Application.ProviderContracts
@using BlazorServerUI.Handlers
@inject ICategoryProvider categoryProvider
@inject NavigationManager navMgr
@inject ProfileDataHandler profileDataHandler

<div class="guides-container">

    <CategoriesHeader/>

    <div class="column-container">
        @for (int i = 0; i < 2; i++)
        {
            <div class="guide-coloumn">
                @{
                    int idx = 0;
                    foreach (CategoryWithGuidesDto cwg in profileDataHandler.Categories.CategoriesWithGuides)
                    {
                        if (idx % 2 == i)
                        {
                            CategoryDto? tmp = cwg.Category;
                            <CategoryCard CategoryId="@tmp?.Id" OnStateChanged="SomethingChanged"/>
                        }
                        idx++;
                    }
                }
            </div>
        }
    </div>

</div>

@code {

    // [CascadingParameter]
    // public Task<AuthenticationState> AuthState { get; set; } = null!;

    // private ICollection<CategoryDto> categories = null!;


    protected override async Task OnInitializedAsync()
    {
        profileDataHandler.OnCategoryAdded += () => StateHasChanged();
    }


    private Task CategoryAdded(CategoryDto category)
    {
    // categories.Add(category);
    // categories = categories.OrderByDescending(c => c.Title).ToList();
    // SnackBarHandler.ShowSnackMessage($"Category \"{category.Title}\" created");
        return Task.CompletedTask;
    }

    private void SomethingChanged()
    {
    // TODO this is currently used to refresh after a category is deleted.
    // feels hacky, but would have to update categories and guides around. Much work. 
        Console.WriteLine("Update...");
    // navMgr.NavigateTo("/Profile", true);
    }

}