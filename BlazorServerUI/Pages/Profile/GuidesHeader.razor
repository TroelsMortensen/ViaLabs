@using Application.EntryContracts
@using Application.Profile.DTOs
@using Entities
@using BlazorServerUI.Pages.Components
@inject ICategoryHome categoryHome

<div style="display:flex; justify-content: center">
    <div>
        <h1>
            Guides
        </h1>
    </div>
    <div>
        <img class="new-category-icon" src="icons/AddCategory.svg" @onclick="@(() => showModal = true)" title="New Category"/>
    </div>
</div>
<hr/>

<Modal ShowModal="@showModal">
    <h3>New Category</h3>
    <hr/>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Category title</label>
    </div>
    <div style="margin-bottom: 5px">
        <input type="text" style="width: 20ch; border-radius: 10px; padding: 3px; text-align: center" @bind="@categoryTitle" max="25"/>
    </div>
    <div style="margin-bottom: 5px">
        <label>Background color:</label>
    </div>
    <div style="margin-bottom: 5px">
        <ColorPicker OnColorChange="@(args => backgroundColor = args)" />
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div>
            <label style="color:red">@errorLabel</label>
        </div>
    }
    <div style="margin-top: 5px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="NewCategory">Accept</button>
        <button class="negative-color vialab-button" style="margin-left: 10px" @onclick="@(() => showModal = false)">Cancel</button>
    </div>
</Modal>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    [Parameter]
    public EventCallback<CategoryCardDTO> OnCategoryCreated { get; set; }

    private string backgroundColor = "#ffffff";
    private bool showModal;
    private string errorLabel = String.Empty;
    private string categoryTitle = String.Empty;

    private async Task NewCategory()
    {
        AuthenticationState authState = await AuthenticationState;
        string teacherName = authState.User.Identity!.Name!;

        errorLabel = string.Empty;
        CategoryCardDTO category = new()
        {
            Title = categoryTitle, 
            OwnerId = teacherName, 
            BackgroundColor = backgroundColor
        };

        try
        {
            CategoryCardDTO finishedCategory = await categoryHome.CreateCategoryAsync(category);

            await OnCategoryCreated.InvokeAsync(finishedCategory);
            showModal = false;
            categoryTitle = string.Empty;
        }
        catch (Exception e)
        {
            errorLabel = "Error: " + e.Message;
        }
    }
}