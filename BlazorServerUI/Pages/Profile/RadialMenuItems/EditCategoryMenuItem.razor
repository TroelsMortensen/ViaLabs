@using Application.Features.ProfileDataLogic.DTOs.CategoryDTOs
@using Application.Features.ProfileDataLogic.LogicContracts
@using BlazorServerUI.Handlers
@using BlazorServerUI.StateContainers.Profile
@using JsonData.Repositories
@namespace BlazorServerUI.Pages.Profile.RadialMenuItems
@inject ICategoryLogic categoryLogic
@inject ProfileStateContainer profileStateContainer

<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-1" : "item-closed")"
     src="icons/EditCategory.svg"
     @onclick="ShowEditCategory"
     title="Edit Category"/>

<Modal ShowModal="@showEditCategoryModal">
    <h3>Edit Category</h3>
    <hr/>
    ½
    <div style="margin-bottom: 5px">
        <ReactiveInputField GhostText="Title" WidthWithUnit="20ch" OnValueChange="s => editedCategoryTitle = s"></ReactiveInputField>
    </div>
    <div style="margin-bottom: 5px">
        <label>Background color:</label>
    </div>
    <div style="margin-bottom: 5px">
        <ColorPicker ColorValue="@editedBackgroundColor" OnColorChange="@(args => editedBackgroundColor = args)"/>
    </div>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <div>
            <label style="color:red">@errorLabel</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="UpdateCategory">Accept</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="@(() => showEditCategoryModal = false)">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public Guid CategoryId { get; set; }
   
    private string? editedCategoryTitle;

    private CategoryDto categoryDto;
    private string? editedBackgroundColor;
    private string errorLabel = string.Empty;
    private bool showEditCategoryModal;


    private void ShowEditCategory()
    {
        CategoryWithGuidesAndResourcesDto categoryWithGuidesAndResourcesDto = profileStateContainer.CategoriesWithGuides.First(c => c.Category != null && c.Category.Id.Equals(CategoryId));
        categoryDto = categoryWithGuidesAndResourcesDto.Category;
        editedCategoryTitle = categoryDto.Title;
        editedBackgroundColor = categoryDto.BackgroundColor;
        
        showEditCategoryModal = true;
        errorLabel = string.Empty;
    }

    private async Task UpdateCategory()
    {
        errorLabel = string.Empty;
        CategoryDto toUpdate = new(categoryDto.Id, editedCategoryTitle!, editedBackgroundColor!);
        try
        {
            await categoryLogic.UpdateAsync(toUpdate);
            categoryDto.Title = editedCategoryTitle!;
            categoryDto.BackgroundColor = editedBackgroundColor!;
            
            showEditCategoryModal = false;
            SnackBarHandler.ShowSnackMessage("Category edited");
            profileStateContainer.OnCategoryUpdated.Invoke(categoryDto.Id); // TODO Shouldn't call here. Ask pSC to raise event. Some day
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
}