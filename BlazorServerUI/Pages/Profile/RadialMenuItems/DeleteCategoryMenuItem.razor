@namespace BlazorServerUI.Pages.Profile.RadialMenuItems

@using Application.ServiceContracts
@using Application.DTOs.CategoryDTOs
@using BlazorServerUI.StateContainers.Profile

@inject ICategoryService categoryService
@inject ProfileStateContainer profileStateContainer

<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-4" : "item-closed")"
     src="icons/DeleteCategory.svg"
     @onclick="@(ShowRemoveCategory)"
     title="Remove Category"/>

<Modal ShowModal="@showDeleteConfirmationModal">
    <h3>Delete Category?</h3>
    <hr/>
    <div style="margin-top: 5px">
        @if(!string.IsNullOrEmpty(errorLabel)){
            <div>
                <label style="color:red">@errorLabel</label>
            </div>
        }
        <button class="progress-button vialab-button"
                @onmousedown="DeleteButtonDown"
                @onmouseup="() => isHolding = false"
                @onmouseout="() => isHolding = false">
            <div class="progress-button-filler" style="width:@progress%"></div>
            <span class="progress-button-text">Hold to Delete</span>
        </button>
        <span style="padding: 5px"></span>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="@(() => showDeleteConfirmationModal = false)">Cancel</button>
    </div>
</Modal>


@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public Guid CategoryId { get; set; } 
    
    private int progress;
    private bool isHolding;
    private string errorLabel = string.Empty;
    
    private bool showDeleteConfirmationModal;

    private void ShowRemoveCategory()
    {
        progress = 0;
        showDeleteConfirmationModal = true;
        errorLabel = string.Empty;
    }

    private async Task DeleteCategory()
    {
        await categoryService.DeleteAsync(CategoryId);
        profileStateContainer.DeleteCategory(CategoryId);
        SnackBarHandler.ShowSnackMessage("Category deleted!");
    }

    private async Task DeleteButtonDown()
    {
        isHolding = true;
        await UpdateProgressBar();
    }

    private async Task UpdateProgressBar()
    {
        
        while (progress < 100 && isHolding)
        {
            await Task.Delay(10);
            progress++;
            StateHasChanged();
        }
        if (progress == 100)
        {
            try
            {
                showDeleteConfirmationModal = false;
                progress = 0;
                await DeleteCategory();
            }
            catch (Exception e)
            {
                errorLabel = e.Message;
            }
        }
        if (!isHolding)
        {
            progress = 0;
        }
    }
}