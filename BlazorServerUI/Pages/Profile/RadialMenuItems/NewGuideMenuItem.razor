@using Application.ServiceContracts
@using Application.DTOs.GuideDTOs
@using Application.DTOs.CategoryDTOs
@using BlazorServerUI.Handlers
@namespace BlazorServerUI.Pages.Profile.RadialMenuItems
@inject IGuideService guideService
@inject ProfileDataHandler profileDataHandler

<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-2" : "item-closed")"
     src="icons/AddGuide.svg"
     @onclick="NewGuide"
     title="New Guide"/>

<Modal ShowModal="@showAddGuideModal">
    <h3 >Create New Guide</h3>
    <hr/>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Guide Title</label>
    </div>
    <div style="margin-bottom: 5px">
        <input type="text" style="width: 75ch; border-radius: 10px; padding: 3px; text-align: center" @bind="@newGuideTitle" max="25"/>
    </div>
    @if (!string.IsNullOrEmpty(createGuideErrorLabel))
    {
        <div>
            <label style="color:red">@createGuideErrorLabel</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="CreateNewGuide">Accept</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="@(() => showAddGuideModal = false)">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public CategoryDto? Category { get; set; }

    // [Parameter]
    // public EventCallback<GuideHeaderDto> OnGuideCreated { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private bool showAddGuideModal;
    private string createGuideErrorLabel = String.Empty;
    private string newGuideTitle = String.Empty;

    private Task NewGuide()
    {
        showAddGuideModal = true;
        createGuideErrorLabel = string.Empty;
        return Task.CompletedTask;
    }

    private async Task CreateNewGuide()
    {
        AuthenticationState authState = await AuthStateTask;
        string? teacher = authState.User.Identity!.Name;
        GuideCreationDto guide = new(newGuideTitle,teacher!,Category?.Id);
        
        try
        {
            GuideHeaderDto created = await guideService.CreateGuideAsync(guide);
            Console.WriteLine("Adding to handler");
            profileDataHandler.AddGuideToCategory(created, Category);
            newGuideTitle = String.Empty;
            SnackBarHandler.ShowSnackMessage($"Guide \"{created.Title}\" created!");
            showAddGuideModal = false;
        }
        catch (Exception e)
        {
            createGuideErrorLabel = e.Message;
        }
    }

}