@using BlazorServerUI.StateContainers.Profile
@using Application.DTOs.CategoryDTOs
@using Application.DTOs.GuideDTOs
@namespace BlazorServerUI.Pages.Profile.RadialMenuItems
@inject IGuideService guideService
@inject ProfileStateContainer profileStateContainer

<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-2" : "item-closed")"
     src="icons/AddGuide.svg"
     @onclick="OpenNewGuideDialog"
     title="New Guide"/>

<Modal ShowModal="@showAddGuideModal">
    <h3 >Create New Guide</h3>
    <hr/>
    @* <div style="margin-bottom: 5px"> *@
    @*     <label style="font-weight: bold">Guide Title</label> *@
    @* </div> *@
    <div style="margin-bottom: 5px">
        @* <input type="text" class="popout-modal-input" style="width: 75ch" @bind="@newGuideTitle" maxlength="75"/> *@
        <ReactiveInputField GhostText="Title" WidthWithUnit="75ch" OnValueChange="s => newGuideTitle = s"></ReactiveInputField>
    </div>
    @if (!string.IsNullOrEmpty(createGuideErrorLabel))
    {
        <div>
            <label style="color:red">@createGuideErrorLabel</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="CreateNewGuide">Accept</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="Close">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public CategoryDto? Category { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private bool showAddGuideModal;
    private string createGuideErrorLabel = String.Empty;
    private string newGuideTitle = String.Empty;

    private void OpenNewGuideDialog()
    {
        showAddGuideModal = true;
        createGuideErrorLabel = string.Empty;
    }

    private async Task CreateNewGuide()
    {
        AuthenticationState authState = await AuthStateTask;
        string? teacher = authState.User.Identity!.Name;
        GuideCreationDto guide = new(newGuideTitle, teacher!, Category?.Id);

        try
        {
            GuideHeaderDto created = await guideService.CreateGuideAsync(guide);
            
            profileStateContainer.AddGuideToCategory(created, Category);
            newGuideTitle = String.Empty;
            SnackBarHandler.ShowSnackMessage($"Guide \"{created.Title}\" created!");
            showAddGuideModal = false;
        }
        catch (Exception e)
        {
            createGuideErrorLabel = e.Message;
        }
    }

    private void Close()
    {
        showAddGuideModal = false;
        createGuideErrorLabel = String.Empty;
        newGuideTitle = String.Empty;
    }

}