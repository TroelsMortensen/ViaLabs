@using BlazorServerUI.StateContainers.Profile
@using System.Text.Json
@using Application.Features.ProfileDataLogic.DTOs.ExternalResourceDTOs
@using Application.Features.ProfileDataLogic.LogicContracts
@using Application.Features.SharedDtos
@using BlazorServerUI.Popups

@namespace BlazorServerUI.Pages.Profile.RadialMenuItems

@* @inject IExternalResourceLogic extResLogic *@
@inject ProfileStateContainer profileStateContainer


<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-3" : "item-closed")"
     src="icons/ExternalLink.svg"
     @onclick="OpenNewExtResourceDialog"
     title="New External Resource"/>


<Modal ShowModal="@showAddExtResModal">
    <h3 >Create External Resource</h3>
    <hr/>
    <div style="margin-bottom: 15px">
        <ReactiveInputField GhostText="Title" WidthWithUnit="50ch" OnValueChange="s => extRes.Title = s"/>
    </div>
    <div style="margin-bottom: 15px">
        <ReactiveInputField GhostText="Url" WidthWithUnit="50ch" OnValueChange="s => extRes.Url = s"/>
    </div>
    <div style="margin-bottom: 5px">
        <ReactiveInputField GhostText="Description" WidthWithUnit="50ch" UseArea="true" OnValueChange="s => extRes.Description = s"></ReactiveInputField>
    </div>
    @if (!string.IsNullOrEmpty(errorMsg))
    {
        <div>
            <label style="color:red">@errorMsg</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="CreateNewResource">Accept</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="Close">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public CategoryDto? Category { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private bool showAddExtResModal;
    private string errorMsg = String.Empty;

    private ExtResCreationRequest extRes = new();


    private void OpenNewExtResourceDialog()
    {
        showAddExtResModal = true;
        errorMsg = "";
    }

    private async Task CreateNewResource()
    {
        AuthenticationState authState = await AuthStateTask;
        string? teacher = authState.User.Identity!.Name;

        extRes.OwnerId = teacher!;
        extRes.CategoryId = Category?.Id;
        try
        {
            throw new NotImplementedException();
    // ExternalResourceDisplayDto created = await extResLogic.CreateAsync(extRes); TODO
    // profileStateContainer.AddExternalResourceToCategory(created, Category);
    //
    // extRes = new();
    //
    // SnackBarHandler.ShowSnackMessage($"Resource \"{created.Title}\" created!");
    //
    // showAddExtResModal = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMsg = e.Message;
        }
    }

    private void Close()
    {
        extRes = new();
        errorMsg = String.Empty;
        showAddExtResModal = false;
    }

}