@using Application.DTOs.CategoryDTOs
@using Application.DTOs.ExternalResourceDTOs
@using BlazorServerUI.StateContainers.Profile

@namespace BlazorServerUI.Pages.Profile.RadialMenuItems

@inject IExternalResourceService extResService
@inject ProfileStateContainer profileStateContainer


<img class="new-item-icon hover-enlarge radial-menu-item @(ShowMenu ? "item-open-3" : "item-closed")"
     src="icons/ExternalLink.svg"
     @onclick="OpenNewExtResourceDialog"
     title="New External Resource"/>


<Modal ShowModal="@showAddExtResModal">
    <h3 >Create External Resource</h3>
    <hr/>
    @* <div style="margin-bottom: 5px"> *@
    @*     <label style="font-weight: bold">Resource Title</label> *@
    @* </div> *@
    <div style="margin-bottom: 5px">
        <ReactiveInputField/>
        @* <input type="text" class="popout-modal-input" style="width: 50ch" @bind="@extRes.Title"/> *@
    </div>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Url</label>
    </div>
    <div style="margin-bottom: 5px">
        <input type="text" class="popout-modal-input" style="width: 50ch" @bind="@extRes.Url"/>
    </div>
    <div style="margin-bottom: 5px">
        <label style="font-weight: bold">Description</label>
    </div>
    <div style="margin-bottom: 5px">
        <textarea class="description-input" @bind="@extRes.Url"/>
    </div>
    @if (!string.IsNullOrEmpty(errorMsg))
    {
        <div>
            <label style="color:red">@errorMsg</label>
        </div>
    }
    <div style="margin-top: 15px">
        <button class="positive-color vialab-button" style="margin-right: 10px" @onclick="CreateNewResource">Accept</button>
        <button class="neutral-color vialab-button" style="margin-left: 10px" @onclick="Close">Cancel</button>
    </div>
</Modal>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public CategoryDto? Category { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private bool showAddExtResModal;
    private string errorMsg = String.Empty;

    private ExtRecourseCreationDto extRes = new();


    private void OpenNewExtResourceDialog()
    {
        showAddExtResModal = true;
        errorMsg = "";
    }

    private async Task CreateNewResource()
    {
        AuthenticationState authState = await AuthStateTask;
        string? teacher = authState.User.Identity!.Name;


        try
        {
            ExternalResourceDto created = await extResService.CreateExternalResourceAsync(extRes);
            profileStateContainer.AddExternalResourceToCategory(created, Category);

            extRes = new();

            SnackBarHandler.ShowSnackMessage($"Resource \"{created.Title}\" created!");

            showAddExtResModal = false;
        }
        catch (Exception e)
        {
            errorMsg = e.Message;
        }
    }

    private void Close()
    {
        extRes = new();
        errorMsg = String.Empty;
        showAddExtResModal = false;
    }

}