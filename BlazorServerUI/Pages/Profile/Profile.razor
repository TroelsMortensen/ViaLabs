@page "/Profile"
@using Application.EntryContracts
@using Entities
@inject ITeacherHome teacherHome

<div style="display:flex; justify-content: center">
    @if (approvedTeacher is not null)
    {
        <div class="guides-container">
            <h1>
                Guides
            </h1>

            <div class="column-container">
                <div class="guide-coloumn">
                    <div class="category-card">
                        <h2>
                            Un-categorized
                            <img class="icon" src="icons/Guide.svg" @onclick="CreateNewGuide" title="New Guide"/>
                        </h2>
                    </div>
                </div>
                <div class="guide-coloumn">

                </div>
            </div>
        </div>
    }
    <ProfileCard ApprovedTeacher="@approvedTeacher" UserName="@userName" IsViaTeacher="@isViaTeacher"/>

</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private string userName = String.Empty;
    private bool isViaTeacher;
    private Teacher? approvedTeacher;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateTask;
        userName = authState.User.Identity?.Name;
        Console.WriteLine(userName);
        isViaTeacher = teacherHome.IsViaTeacher(userName);
        if (isViaTeacher)
        {
            approvedTeacher = await teacherHome.GetTeacherAsync(userName);
        }
    // TODO catch exceptions here, and show toast error message
    }

    private Task CreateNewGuide()
    {
        Guide guide = new Guide(approvedTeacher);
        return Task.CompletedTask;
    }

}