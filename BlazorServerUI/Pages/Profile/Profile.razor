@page "/Profile"
@using Application.Features.DisplayProfileInfo.Logic
@using Application.Features.DisplayProfileInfo.DataProvider
@using Application.Features.DisplayProfileInfo.DTOs
@using BlazorServerUI.StateContainers.Profile
@using SharedKernel.OperationResult
@inject IProfileDataHandler profileDataHandler
@inject IProfileDataProvider profileDataProvider
@inject ProfileStateContainer profileStateContainer

<div style="display:flex; justify-content: space-evenly">
    <ProfileCard ApprovedTeacher="@approvedTeacher" UserName="@userName" IsViaTeacher="@isViaTeacher"/>
</div>
<div style="display:flex; justify-content: space-evenly">
    @if (approvedTeacher is not null)
    {
        <CategoriesOverview/> 
    }
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private string userName = String.Empty;
    private bool isViaTeacher;
    private TeacherHeaderDto? approvedTeacher;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateTask;
        userName = authState.User.Identity?.Name!;
        isViaTeacher = profileDataHandler.IsViaTeacher(userName);
        
        if (!isViaTeacher) return;

        Result<TeacherHeaderDto> result = await profileDataProvider.GetTeacherAsync(userName);
        if (result.HasErrors)
        {
            // TODO handle these errors somehow?
            return;
        }
        
        approvedTeacher = result.Value;
        if (approvedTeacher != null)
        {
            await profileStateContainer.PopulateAsync(approvedTeacher.Name);
        }
    // TODO catch exceptions here, and show toast error message
    }

}