@page "/Profile"
@using ViewData.ProfileInfo.Queries
@using ViewData.ProfileInfo.DTOs
@using ViewData
@using BlazorServerUI.StateContainers.Profile
@inject IQueryHandler<GetTeacher, TeacherHeaderDto> teacherQueryHandler
@inject ProfileStateContainer profileStateContainer

<div style="display:flex; justify-content: space-evenly">
    <ProfileCard ApprovedTeacher="@approvedTeacher" UserName="@userName" IsViaTeacher="@isViaTeacher"/>
</div>
<div style="display:flex; justify-content: space-evenly">
    @if (approvedTeacher is not null)
    {
        <CategoriesOverview/>
    }
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private string userName = String.Empty;
    private bool isViaTeacher;
    private TeacherHeaderDto? approvedTeacher;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateTask;
        userName = authState.User.Identity?.Name!;
        isViaTeacher = IsViaTeacher();

        if (!isViaTeacher) return;

        approvedTeacher = await teacherQueryHandler.Query(new GetTeacher(userName));

        if (approvedTeacher != null)
        {
            await profileStateContainer.PopulateAsync(approvedTeacher.Name);
        }
    // TODO catch exceptions here, and show toast error message
    }

    private bool IsViaTeacher()
    {
        if (string.IsNullOrEmpty(userName)) return false;

        return IsViaAccount(userName);
    }

    private static bool IsViaAccount(string userName)
    {
        return userName.StartsWith("VIA\\");
    }

}