@using BlazorServerUI.Popups
@inherits ErrorBoundary


@* Found the following solution here https://stackoverflow.com/questions/57539330/is-there-a-way-to-globally-catch-all-unhandled-errors-in-a-blazor-single-page-ap *@


@if (CurrentException is null)
{
    @ChildContent
}
else if (ErrorContent is not null)
{
    @ErrorContent(CurrentException)
}
else
{
    <Modal ShowModal="@show">
        <div class="header">
            <img class="error-icon" src="icons/Error.svg" title="Error" alt="what is this alt you speak about"/>
            <hr/>
        </div>

        <div class="errors">
                @foreach (var exception in receivedExceptions)
                {
                    <div class="exception-item">
                        <label>@exception.Message</label>
                    </div>
                }
        </div>
        <hr/>
        <div class="button-row">
            <button class="positive-cancel vialab-button" style="margin-right: 10px" @onclick="Close">Close</button>
        </div>
    </Modal>

    @ChildContent

}

@code {
    List<Exception> receivedExceptions = new();

    private bool show = true;
    
    protected override Task OnErrorAsync(Exception exception)
    {
        receivedExceptions.Add(exception);
        return base.OnErrorAsync(exception);
    }

    private void Close()
    {
        receivedExceptions.Clear();
        show = false;
        base.Recover();
    }

}